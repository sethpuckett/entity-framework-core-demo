TLDR
=================
1. Prerequisites (Dotnet Core, VS Code, DB, Node, Postman)

2. Create app with Yeoman and open in VS Code

3. Add Nuget dependencies

4. Create models

5. Create DB context

6. Add context configuration to Startup.cs

7. Create and run initial migration

8. Create and run Status seed migration

9. Create controller and add GetAllTodos method

10. Add remaining methods to controller

11. Test with Postman

12. Data Annotations



Prerequisites
=================
Install latest .Net Core (https://www.microsoft.com/net/download/core#/current)
Install Visual Studio Code
Install Postgresql (or DB of choice)


recommended
==================
Install PgAdmin (GUI for Postgres administration)
Install Node/NPM (demo will use Yeoman templates)
Install Postman (REST API Tester)


Creating new app
==================
Use Yeoman to setup new project template
	npm install -g yo generator-aspnet
	yo aspnet -> select "Web API Application"
Open project in Visual Studio Code
Install C# and Mono Debug extensions (and any other recommended)
Install .Net Core Project Manager (recommended)
Restore unresolved dependencies ('Yes' in popup or 'dotnet restore' in CLI)
Run from debug view or 'dotnet run' in CLI to run. localhost:5000//api/values


Setting up Dependencies
==================
cmd+shift+p - Nuget: Add New Package
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Tools
Microsoft.EntityFrameworkCore.Design
Npgsql.EntityFrameworkCore.PostgreSQL

Add to project.json:

"dependencies": {
	"Microsoft.EntityFrameworkCore": "1.1.0",
    "Microsoft.EntityFrameworkCore.Tools": "1.1.0-preview4-final",
    "Microsoft.EntityFrameworkCore.Design": "1.1.0",
    "Npgsql.EntityFrameworkCore.PostgreSQL": "1.1.0"
},
"tools": {
	"Microsoft.AspNetCore.Server.IISIntegration.Tools": "1.1.0-preview4-final",
	"Microsoft.EntityFrameworkCore.Tools.DotNet": "1.1.0-preview4-final",
	"Microsoft.AspNetCore.Razor.Tools": "1.1.0-preview4-final"
}

Setting up Model & DB Context
==============================
Add "Models" folder

in terminal:
yo aspnet:class Todo
yo aspnet:class Tag
yo aspnet:class TodoTag
yo aspnet:class Status

Add properties to models

Add "DAL" folder

in terminal:
yo aspnet:class TodoContext

inherit class from DbContext

add 4 DbSet<>'s

change constructor:
public TodoContext(DbContextOptions options) : base(options)

In Startup.cs ConfigureServices:
	make sure using Microsoft.EntityFrameworkCore; is at the top
	var connectionString = "User ID=postgres;Password=password;Server=localhost;Port=5432;Database=todo;";
	services.AddEntityFrameworkNpgsql().AddDbContext<TodoContext>(o => o.UseNpgsql(connectionString));

	
EF Command Line Operations
==========================
from project directory:
dotnet ef migrations add CreateTables --verbose
dotnet ef database update

dotnet ef migrations add PopulateStatusesTable
to Up():
  migrationBuilder.Sql("INSERT INTO \"Statuses\" (\"Title\") VALUES ('New')");
  migrationBuilder.Sql("INSERT INTO \"Statuses\" (\"Title\") VALUES ('Finished')");
to Down():
  migrationBuilder.Sql("DELETE FROM \"Statuses\"");

dotnet ef database update

Other useful commands:
dotnet ef migrations remove (remove last migration, never delete manually this puts your snapshot out of sync)
dotnet ef migrations script (generate raw sql script equivalent for your migrations)
dotnet ef dbcontext scaffold (generate dbcontext from database)

common error: No executable found matching command "dotnet-ef": double check your dependencies


Setting Up Controller
=====================
in terminal:
yo aspnet:class TodoController

inherit class from Controller
add Route attribute to class
add TodoContext & inject in constructor

add GetAllTodos()
add AddTodo()
add AddTag()
add UpdateStatus()
add DeleteTodo()
add DeleteFinishedTodos()


Testing with Postman
=====================
Test Get: http://localhost:5000/api/Todo
Test Post: http://localhost:5000/api/Todo
	Content-Type: application/json
	{
		"Title": "Get Groceries",
		"Description": "Eggs, Bread, Beer, Wine"
	}
Test Delete: http://localhost:5000/api/Todo/8
Test Update Status: Post to http://localhost:5000/api/Todo/4/status
	Content-Type: application/json
	"Finished"
Test Add Tag: Post to http://localhost:5000/api/Todo/4/tag
	Content-Type: application/json
	"Urgent"


Customizing Model
=======================================

Exclude class or property from data model
Data Annotation - [NotMapped]
Fluent API - ModelBuilder.Ignore()






Model Overview
===============
todo table
	title, description, status, tags

status table
	code, description

tag
	title
	
todo-tag
	title id, tag id
	
	
API Overview
=============
Get all Todos
Add Todo item with title & description
Add Tag to Todo, if new create Tag
Update Todo status
Remove Todo
Remove all completed Todos
	
